{
  "deps": [
    {
      "name": "l3keys2e"
    },
    {
      "name": "leftindex"
    },
    {
      "name": "semtex"
    }
  ],
  "macros": [
    {
      "name": "NewVariableClass",
      "arg": {
        "format": "{}",
        "snippet": "{${1:\\Class%cmd}}"
      }
    },
    {
      "name": "NewVariableClass",
      "arg": {
        "format": "{}[]",
        "snippet": "{${1:\\Class%cmd}}[${2:options}]"
      }
    },
    {
      "name": "DeclareVariableClass",
      "arg": {
        "format": "{}",
        "snippet": "{${1:\\Class%cmd}}"
      }
    },
    {
      "name": "DeclareVariableClass",
      "arg": {
        "format": "{}[]",
        "snippet": "{${1:\\Class%cmd}}[${2:options}]"
      }
    },
    {
      "name": "NewSymbolClass",
      "arg": {
        "format": "{}",
        "snippet": "{${1:\\Class%cmd}}"
      }
    },
    {
      "name": "NewSymbolClass",
      "arg": {
        "format": "{}[]",
        "snippet": "{${1:\\Class%cmd}}[${2:options}]"
      }
    },
    {
      "name": "DeclareSymbolClass",
      "arg": {
        "format": "{}",
        "snippet": "{${1:\\Class%cmd}}"
      }
    },
    {
      "name": "DeclareSymbolClass",
      "arg": {
        "format": "{}[]",
        "snippet": "{${1:\\Class%cmd}}[${2:options}]"
      }
    },
    {
      "name": "NewSimpleClass",
      "arg": {
        "format": "{}",
        "snippet": "{${1:\\Class%cmd}}"
      }
    },
    {
      "name": "NewSimpleClass",
      "arg": {
        "format": "{}[]",
        "snippet": "{${1:\\Class%cmd}}[${2:options}]"
      }
    },
    {
      "name": "DeclareSimpleClass",
      "arg": {
        "format": "{}",
        "snippet": "{${1:\\Class%cmd}}"
      }
    },
    {
      "name": "DeclareSimpleClass",
      "arg": {
        "format": "{}[]",
        "snippet": "{${1:\\Class%cmd}}[${2:options}]"
      }
    },
    {
      "name": "SemantexBaseObject",
      "unusual": true
    },
    {
      "name": "NewObject",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:\\Class}}{${2:\\object%cmd}}{${3:symbol%formula}}"
      }
    },
    {
      "name": "NewObject",
      "arg": {
        "format": "{}{}{}[]",
        "snippet": "{${1:\\Class}}{${2:\\object%cmd}}{${3:symbol%formula}}[${4:options}]"
      }
    },
    {
      "name": "DeclareObject",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:\\Class}}{${2:\\object%cmd}}{${3:symbol%formula}}"
      }
    },
    {
      "name": "DeclareObject",
      "arg": {
        "format": "{}{}{}[]",
        "snippet": "{${1:\\Class}}{${2:\\object%cmd}}{${3:symbol%formula}}[${4:options}]"
      }
    },
    {
      "name": "SetupClass",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:\\Class}}{${2:keyvals}}"
      }
    },
    {
      "name": "SetupObject",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:\\object}}{${2:keyvals}}"
      }
    },
    {
      "name": "UseClassInCommand",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:\\Class}}{${2:symbol%formula}}"
      }
    },
    {
      "name": "UseClassInCommand",
      "arg": {
        "format": "{}[]{}",
        "snippet": "{${1:\\Class}}[${3:options%keyvals}]{${2:symbol%formula}}"
      }
    },
    {
      "name": "SemantexSetup",
      "arg": {
        "format": "{}",
        "snippet": "{${1:options%keyvals}}"
      }
    },
    {
      "name": "SemantexRecordObject",
      "arg": {
        "format": "{}",
        "snippet": "{${1:command}}"
      }
    },
    {
      "name": "SemantexRecordSource",
      "arg": {
        "format": "{}",
        "snippet": "{${1:source%definition}}"
      }
    },
    {
      "name": "SemantexThis"
    },
    {
      "name": "SemantexSetKeys",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetKeysx",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetArgKeys",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetArgKeysx",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetArgSingleKeys",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetArgSingleKeysx",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetOneArgSingleKey",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetOneArgSingleKeyx",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetArgWithoutKeyval",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexSetArgWithoutKeyvalx",
      "arg": {
        "format": "{}",
        "snippet": "{${1:keyvals}}"
      }
    },
    {
      "name": "SemantexDataProvide",
      "arg": {
        "format": "{}",
        "snippet": "{${1:data}}"
      }
    },
    {
      "name": "SemantexDataSet",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:data}}{${2:value}}"
      }
    },
    {
      "name": "SemantexDataSetx",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:data}}{${2:value}}"
      }
    },
    {
      "name": "SemantexDataPutLeft",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:data}}{${2:value}}"
      }
    },
    {
      "name": "SemantexDataPutLeftx",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:data}}{${2:value}}"
      }
    },
    {
      "name": "SemantexDataPutRight",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:data}}{${2:value}}"
      }
    },
    {
      "name": "SemantexDataPutRightx",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:data}}{${2:value}}"
      }
    },
    {
      "name": "SemantexDataGet",
      "arg": {
        "format": "{}",
        "snippet": "{${1:data}}"
      }
    },
    {
      "name": "SemantexDataGetExpNot",
      "arg": {
        "format": "{}",
        "snippet": "{${1:data}}"
      }
    },
    {
      "name": "SemantexDataClear",
      "arg": {
        "format": "{}",
        "snippet": "{${1:data}}"
      }
    },
    {
      "name": "SemantexBoolProvide",
      "arg": {
        "format": "{}",
        "snippet": "{${1:boolean}}"
      }
    },
    {
      "name": "SemantexBoolSetTrue",
      "arg": {
        "format": "{}",
        "snippet": "{${1:boolean}}"
      }
    },
    {
      "name": "SemantexBoolSetFalse",
      "arg": {
        "format": "{}",
        "snippet": "{${1:boolean}}"
      }
    },
    {
      "name": "SemantexBoolIfTF",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:boolean}}{${2:true}}{${3:false}}"
      }
    },
    {
      "name": "SemantexBoolIfT",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:boolean}}{${2:true}}"
      }
    },
    {
      "name": "SemantexBoolIfF",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:boolean}}{${2:false}}"
      }
    },
    {
      "name": "SemantexIntProvide",
      "arg": {
        "format": "{}",
        "snippet": "{${1:integer}}"
      }
    },
    {
      "name": "SemantexIntGet",
      "arg": {
        "format": "{}",
        "snippet": "{${1:integer}}"
      }
    },
    {
      "name": "SemantexIntSet",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:integer}}{${2:value}}"
      }
    },
    {
      "name": "SemantexIntIncr",
      "arg": {
        "format": "{}",
        "snippet": "{${1:integer}}"
      }
    },
    {
      "name": "SemantexIntIfEqTF",
      "arg": {
        "format": "{}{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:true}}{${4:false}}"
      }
    },
    {
      "name": "SemantexIntIfEqT",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:true}}"
      }
    },
    {
      "name": "SemantexIntIfEqF",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:false}}"
      }
    },
    {
      "name": "SemantexIntIfGreaterTF",
      "arg": {
        "format": "{}{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:true}}{${4:false}}"
      }
    },
    {
      "name": "SemantexIntIfGreaterT",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:true}}"
      }
    },
    {
      "name": "SemantexIntIfGreaterF",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:false}}"
      }
    },
    {
      "name": "SemantexIntIfLessTF",
      "arg": {
        "format": "{}{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:true}}{${4:false}}"
      }
    },
    {
      "name": "SemantexIntIfLessT",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:true}}"
      }
    },
    {
      "name": "SemantexIntIfLessF",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:integer1}}{${2:integer2}}{${3:false}}"
      }
    },
    {
      "name": "SemantexIntClear",
      "arg": {
        "format": "{}",
        "snippet": "{${1:integer}}"
      }
    },
    {
      "name": "SemantexIfBlankTF",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:tokens}}{${2:true}}{${3:false}}"
      }
    },
    {
      "name": "SemantexIfBlankT",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:tokens}}{${2:true}}"
      }
    },
    {
      "name": "SemantexIfBlankF",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:tokens}}{${2:false}}"
      }
    },
    {
      "name": "SemantexStrIfEqTF",
      "arg": {
        "format": "{}{}{}{}",
        "snippet": "{${1:string1}}{${2:string2}}{${3:true}}{${4:false}}"
      }
    },
    {
      "name": "SemantexStrIfEqT",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:string1}}{${2:string2}}{${3:true}}"
      }
    },
    {
      "name": "SemantexStrIfEqF",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:string1}}{${2:string2}}{${3:false}}"
      }
    },
    {
      "name": "SemantexERROR",
      "arg": {
        "format": "{}",
        "snippet": "{${1:error message}}"
      }
    },
    {
      "name": "SemantexERRORKeyValueNotFound",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:key%plain}}{${2:value}}"
      }
    },
    {
      "name": "SemantexERRORArgKeyValueNotFound",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:key%plain}}{${2:value}}"
      }
    },
    {
      "name": "SemantexExpNot",
      "arg": {
        "format": "{}",
        "snippet": "{${1:value}}"
      }
    }
  ],
  "envs": [],
  "keys": {
    "\\SetupClass#c,\\SetupObject#c,\\UseClassInCommand#c": [
      "define keys={{${1:key1}}{${2:keys to run}}${3:,{key2}{keys to run},...}}\r",
      "define keys[${1:args}]={{${2:key1}}{${3:keys to run}}${4:,{key2}{keys to run},...}}\r",
      "append keys={{${1:key1}}{${2:keys to run}}${3:,{key2}{keys to run},...}}\r",
      "append keys[${1:args}]={{${2:key1}}{${3:keys to run}}${4:,{key2}{keys to run},...}}\r",
      "prepend keys={{${1:key1}}{${2:keys to run}}${3:,{key2}{keys to run},...}}\r",
      "prepend keys[${1:args}]={{${2:key1}}{${3:keys to run}}${4:,{key2}{keys to run},...}}\r",
      "remove key=${1:key name}\r",
      "remove key[${1:args}]=${2:key name}\r",
      "define arg keys={{${1:key1}}{${2:keys to run}}${3:,{key2}{keys to run},...}}\r",
      "define arg keys[${1:args}]={{${2:key1}}{${3:keys to run}}${4:,{key2}{keys to run},...}}\r",
      "append arg keys={{${1:key1}}{${2:keys to run}}${3:,{key2}{keys to run},...}}\r",
      "append arg keys[${1:args}]={{${2:key1}}{${3:keys to run}}${4:,{key2}{keys to run},...}}\r",
      "prepend arg keys={{${1:key1}}{${2:keys to run}}${3:,{key2}{keys to run},...}}\r",
      "prepend arg keys[${1:args}]={{${2:key1}}{${3:keys to run}}${4:,{key2}{keys to run},...}}\r",
      "remove arg key=${1:key name}\r",
      "remove arg key[${1:args}]=${2:key name}\r",
      "execute={${1:TeX code}}\r",
      "set keys={${1:keyvals}}\r",
      "set keys x={${1:keyvals}}\r",
      "data provide={${1:data}}\r",
      "data set={${1:data}}{${2:value}}\r",
      "data set x={${1:data}}{${2:value}}\r",
      "data put left={${1:data}}{${2:value}}\r",
      "data put left x={${1:data}}{${2:value}}\r",
      "data put right={${1:data}}{${2:value}}\r",
      "data put right x={${1:data}}{${2:value}}\r",
      "data clear={${1:data}}{${2:value}}\r",
      "bool provide={${1:boolean}}\r",
      "bool set true={${1:boolean}}\r",
      "bool set false={${1:boolean}}\r",
      "bool if TF={${1:boolean}}{${2:true}}{${3:false}}\r",
      "bool if T={${1:boolean}}{${2:true}}\r",
      "bool if F={${1:boolean}}{${2:false}}\r",
      "int provide={${1:integer}}\r",
      "int set={${1:integer}}{${2:value}}\r",
      "int incr={${1:integer}}\r",
      "int if eq TF={${1:integer1}}{${2:integer2}}{${3:true}}{${4:false}}\r",
      "int if eq T={${1:integer1}}{${2:integer2}}{${3:true}}\r",
      "int if eq F={${1:integer1}}{${2:integer2}}{${3:false}}\r",
      "int if greater TF={${1:integer1}}{${2:integer2}}{${3:true}}{${4:false}}\r",
      "int if greater T={${1:integer1}}{${2:integer2}}{${3:true}}\r",
      "int if greater F={${1:integer1}}{${2:integer2}}{${3:false}}\r",
      "int if less TF={${1:integer1}}{${2:integer2}}{${3:true}}{${4:false}}\r",
      "int if less T={${1:integer1}}{${2:integer2}}{${3:true}}\r",
      "int if less F={${1:integer1}}{${2:integer2}}{${3:false}}\r",
      "int clear={${1:integer}}\r",
      "if blank TF={${1:tokens}}{${2:true}}{${3:false}}\r",
      "if blank T={${1:tokens}}{${2:true}}\r",
      "if blank F={${1:tokens}}{${2:false}}\r",
      "string if eq TF={${1:string1}}{${2:string2}}{${3:true}}{${4:false}}\r",
      "string if eq T={${1:string1}}{${2:string2}}{${3:true}}\r",
      "string if eq F={${1:string1}}{${2:string2}}{${3:false}}\r",
      "ERROR={${1:error message}}\r",
      "ERROR key value not found={${1:key}}{${2:value}}\r",
      "ERROR arg key value not found={${1:key}}{${2:value}}\r",
      "parent=${1:\\Class}\r",
      "class=${1:\\Class}\r",
      "copy=${1:\\object}\r",
      "symbol={${1:value}}\r",
      "symbol put left=${1:value}\r",
      "symbol put right=${1:value}\r",
      "height phantom=${1:value}\r",
      "slanting phantom=${1:value}\r",
      "grading position=${1|upper,lower\r|}",
      "command=${1:command}\r",
      "clear command\r",
      "return\r",
      "inner return\r",
      "right return\r",
      "left return\r",
      "left index return\r",
      "right index return\r",
      "index return\r",
      "left arg return\r",
      "right arg return\r",
      "arg return\r",
      "output=${1:\\Class}\r",
      "do output",
      "output options={${1:keys}}\r",
      "parse options={${1:keys}}\r",
      "parse\r",
      "parse code\r",
      "math class=${1:command}\r",
      "default=${1:value}\r",
      "*\r",
      "**\r",
      "slot\r",
      "dots\r",
      "* with other sep=${1:separator}\r",
      "** with other sep=${1:separator}\r",
      "arg=${1:value}\r",
      "smash\r",
      "prime\r",
      "par",
      "no par\r",
      "never par\r",
      "use par=${1|true,false,never\r|}",
      "par size=${2|normal,auto,*,${1:other}\r|}",
      "left par=${1:parenthesis}\r",
      "right par=${1:parenthesis}\r",
      "spar\r",
      "spar=${2|normal,auto,*,${1:other}\r|}",
      "spar size=${2|normal,auto,*,${1:other}\r|}",
      "left spar=${1:parenthesis}\r",
      "right spar=${1:parenthesis}\r",
      "other spar={${1:left parenthesis}}{${2:right parenthesis}}\r",
      "Other spar={${1:left parenthesis}}{${2:right parenthesis}}{${3:normal|auto|*}}\r",
      "set arg keys={${1:keyvals}}\r",
      "set arg keys x={${1:keyvals}}\r",
      "set arg single keys={${1:keyvals}}\r",
      "set arg single keys x={${1:keyvals}}\r",
      "set one arg single key=${1:key}\r",
      "set one arg single key x=${1:key}\r",
      "set arg without keyval=${1:value}\r",
      "set arg without keyval x=${1:value}\r",
      "pre arg=${1:value}\r",
      "pre arg put left=${1:value}\r",
      "post arg=${1:value}\r",
      "post arg put right=${1:value}\r",
      "set arg sep=${1:value}\r",
      "set arg slot=${1:value}\r",
      "set arg dots=${1:value}\r",
      "arg keyval=${1|true,false,single keys,one single keys\r|}",
      "arg position=${1|left,right\r|}",
      "next arg with sep",
      "sep arg=${1:value}\r",
      "comma arg=${1:value}\r",
      "arg with other sep={${1:separator}}{${2:value}}\r",
      "arg dots with other sep=${1:separator}\r",
      "arg slot with other sep=${1:separator}\r",
      "arg dots\r",
      "comma arg dots\r",
      "arg slot\r",
      "comma arg slot\r",
      "clear arg\r",
      "clear pre arg\r",
      "clear post arg\r",
      "upper=${1:value}\r",
      "sep upper=${1:value}\r",
      "comman upper=${1:value}\r",
      "pre upper=${1:value}\r",
      "pre upper put left=${1:value}\r",
      "post upper=${1:value}\r",
      "post upper put right=${1:value}\r",
      "upper put left=${1:value}\r",
      "set upper sep=${1:value}\r",
      "next upper with sep",
      "upper with other sep={${1:separator}}{${2:value}}\r",
      "upper slot\r",
      "sep upper slot\r",
      "comma upper slot\r",
      "set upper slot=${1:value}\r",
      "upper slot with other sep=${1:separator}\r",
      "upper dots\r",
      "sep upper dots\r",
      "comma upper dots\r",
      "set upper dots=${1:value}\r",
      "upper dots with other sep=${1:separator}\r",
      "upper *\r",
      "upper **\r",
      "sep upper *\r",
      "sep upper **\r",
      "comma upper *\r",
      "comma upper **\r",
      "upper * with other sep=${1:separator}\r",
      "upper ** with other sep=${1:separator}\r",
      "clear upper\r",
      "clear pre upper\r",
      "clear post upper\r",
      "lower=${1:value}\r",
      "sep lower=${1:value}\r",
      "comma lower=${1:value}\r",
      "pre lower=${1:value}\r",
      "pre lower put left=${1:value}\r",
      "post lower=${1:value}\r",
      "post lower put right=${1:value}\r",
      "lower put left=${1:value}\r",
      "set lower sep=${1:value}\r",
      "next lower with sep",
      "lower with other sep={${1:separator}}{${2:value}}\r",
      "lower slot\r",
      "sep lower slot\r",
      "comma lower slot\r",
      "set lower slot=${1:value}\r",
      "lower slot with other sep=${1:separator}\r",
      "lower dots\r",
      "sep lower dots\r",
      "comma lower dots\r",
      "set lower dots=${1:value}\r",
      "lower dots with other sep=${1:separator}\r",
      "lower *\r",
      "lower **\r",
      "sep lower *\r",
      "sep lower **\r",
      "comma lower *\r",
      "comma lower **\r",
      "lower * with other sep=${1:separator}\r",
      "lower ** with other sep=${1:separator}\r",
      "clear lower\r",
      "clear pre lower\r",
      "clear post lower\r",
      "upper left=${1:value}\r",
      "sep upper left=${1:value}\r",
      "comman upper left=${1:value}\r",
      "pre upper left=${1:value}\r",
      "pre upper left put left=${1:value}\r",
      "post upper left=${1:value}\r",
      "post upper left put right=${1:value}\r",
      "upper left put left=${1:value}\r",
      "set upper left sep=${1:value}\r",
      "next upper left with sep",
      "upper left with other sep={${1:separator}}{${2:value}}\r",
      "upper left slot\r",
      "sep upper left slot\r",
      "comma upper left slot\r",
      "set upper left slot=${1:value}\r",
      "upper left slot with other sep=${1:separator}\r",
      "upper left dots\r",
      "sep upper left dots\r",
      "comma upper left dots\r",
      "set upper left dots=${1:value}\r",
      "upper left dots with other sep=${1:separator}\r",
      "upper left *\r",
      "upper left **\r",
      "sep upper left *\r",
      "sep upper left **\r",
      "comma upper left *\r",
      "comma upper left **\r",
      "upper left * with other sep=${1:separator}\r",
      "upper left ** with other sep=${1:separator}\r",
      "clear upper left\r",
      "clear pre upper left\r",
      "clear post upper left\r",
      "lower left=${1:value}\r",
      "sep lower left=${1:value}\r",
      "comman lower left=${1:value}\r",
      "pre lower left=${1:value}\r",
      "pre lower left put left=${1:value}\r",
      "post lower left=${1:value}\r",
      "post lower left put right=${1:value}\r",
      "lower left put left=${1:value}\r",
      "set lower left sep=${1:value}\r",
      "next lower left with sep",
      "lower left with other sep={${1:separator}}{${2:value}}\r",
      "lower left slot\r",
      "sep lower left slot\r",
      "comma lower left slot\r",
      "set lower left slot=${1:value}\r",
      "lower left slot with other sep=${1:separator}\r",
      "lower left dots\r",
      "sep lower left dots\r",
      "comma lower left dots\r",
      "set lower left dots=${1:value}\r",
      "lower left dots with other sep=${1:separator}\r",
      "lower left *\r",
      "lower left **\r",
      "sep lower left *\r",
      "sep lower left **\r",
      "comma lower left *\r",
      "comma lower left **\r",
      "lower left * with other sep=${1:separator}\r",
      "lower left ** with other sep=${1:separator}\r",
      "clear lower left\r",
      "clear pre lower left\r",
      "clear post lower left\r",
      "d=${1:value}\r",
      "sep d=${1:value}\r",
      "comma d=${1:value}\r",
      "pre d=${1:value}\r",
      "pre d put left=${1:value}\r",
      "post d=${1:value}\r",
      "post d put left=${1:value}\r",
      "d put left=${1:value}\r",
      "set d sep=${1:value}\r",
      "next d with sep",
      "d with other sep={${1:separator}}{${2:value}}\r",
      "d slot\r",
      "sep d slot\r",
      "comma d slot\r",
      "set d slot=${1:value}\r",
      "d slot with other sep=${1:separator}\r",
      "d dots\r",
      "sep d dots\r",
      "comma d dots\r",
      "set d dots=${1:value}\r",
      "d dots with other sep=${1:separator}\r",
      "d *\r",
      "d **\r",
      "sep d *\r",
      "sep d **\r",
      "comma d *\r",
      "comma d **\r",
      "d * with other sep=${1:separator}\r",
      "d ** with other sep=${1:separator}\r",
      "clear d\r",
      "clear pre d\r",
      "clear post d\r",
      "i=${1:value}\r",
      "sep i=${1:value}\r",
      "comma i=${1:value}\r",
      "pre i=${1:value}\r",
      "pre i put left=${1:value}\r",
      "post d=${1:value}\r",
      "post i put left=${1:value}\r",
      "i put left=${1:value}\r",
      "set i sep=${1:value}\r",
      "next i with sep",
      "i with other sep={${1:separator}}{${2:value}}\r",
      "i slot\r",
      "sep i slot\r",
      "comma i slot\r",
      "set i slot=${1:value}\r",
      "i slot with other sep=${1:separator}\r",
      "i dots\r",
      "sep i dots\r",
      "comma i dots\r",
      "set i dots=${1:value}\r",
      "i dots with other sep=${1:separator}\r",
      "i *\r",
      "i **\r",
      "sep i *\r",
      "sep i **\r",
      "comma i *\r",
      "comma i **\r",
      "i * with other sep=${1:separator}\r",
      "i ** with other sep=${1:separator}\r",
      "clear i\r",
      "clear pre i\r",
      "clear post i\r"
    ],
    "\\SemantexSetup#c": [
      "keyval parser=${1:command}\r",
      "single key parser=${1:command}\r",
      "semtex file"
    ]
  },
  "args": []
}