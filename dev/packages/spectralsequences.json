{
  "deps": [
    {
      "name": "tikz"
    },
    {
      "name": "etoolbox"
    },
    {
      "name": "verbatim"
    },
    {
      "name": "tikzlibraryquotes"
    },
    {
      "name": "tikzlibraryfit"
    },
    {
      "name": "tikzlibrarypositioning"
    },
    {
      "name": "tikzlibraryintersections"
    },
    {
      "name": "tikzlibrarybackgrounds"
    },
    {
      "name": "tikzlibraryshapes"
    },
    {
      "name": "pdfcomment",
      "if": "tooltip"
    }
  ],
  "macros": [
    {
      "name": "sseqtooltip",
      "if": "tooltip",
      "unusual": true,
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:text}}{${2:tooltip text}}"
      }
    },
    {
      "name": "printpage"
    },
    {
      "name": "printpage",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "class(x,y)"
    },
    {
      "name": "class",
      "arg": {
        "format": "[]()",
        "snippet": "[${1:options%keyvals}](${2:x},${3:y})"
      }
    },
    {
      "name": "replaceclass(x,y)"
    },
    {
      "name": "replaceclass(x,y,n)"
    },
    {
      "name": "replaceclass",
      "arg": {
        "format": "[]()",
        "snippet": "[${1:options%keyvals}](${2:x},${3:y})"
      }
    },
    {
      "name": "replaceclass",
      "arg": {
        "format": "[]()",
        "snippet": "[${1:options%keyvals}](${2:x},${3:y},${4:n})"
      }
    },
    {
      "name": "replacesource"
    },
    {
      "name": "replacesource",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "replacetarget"
    },
    {
      "name": "replacetarget",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "replacestructlines"
    },
    {
      "name": "replacestructlines(source coord)"
    },
    {
      "name": "classoptions",
      "arg": {
        "format": "[]()",
        "snippet": "[${1:options%keyvals}](${2:x},${3:y})"
      }
    },
    {
      "name": "classoptions",
      "arg": {
        "format": "[]()",
        "snippet": "[${1:options%keyvals}](${2:x},${3:y},${4:n})"
      }
    },
    {
      "name": "classoptions",
      "unusual": true,
      "arg": {
        "format": "[]()",
        "snippet": "[${1:options%keyvals}](${2:class name})"
      }
    },
    {
      "name": "classoptions",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "structline"
    },
    {
      "name": "structline",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "structline(source coord)(target coord)"
    },
    {
      "name": "structline",
      "arg": {
        "format": "[]()()",
        "snippet": "[${1:options%keyvals}](${2:source coord})(${3:target coord})"
      }
    },
    {
      "name": "structlineoptions",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "structlineoptions",
      "arg": {
        "format": "[]()()",
        "snippet": "[${1:options%keyvals}](${2:source coord})(${3:target coord})"
      }
    },
    {
      "name": "extension"
    },
    {
      "name": "extension",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "extension(source coord)(target coord)"
    },
    {
      "name": "extension",
      "arg": {
        "format": "[]()()",
        "snippet": "[${1:options%keyvals}](${2:source coord})(${3:target coord})"
      }
    },
    {
      "name": "extensionoptions",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "extensionoptions",
      "arg": {
        "format": "[]()()",
        "snippet": "[${1:options%keyvals}](${2:source coord})(${3:target coord})"
      }
    },
    {
      "name": "circleclasses(source coord)(target coord)"
    },
    {
      "name": "circleclasses",
      "arg": {
        "format": "[]()()",
        "snippet": "[${1:options%keyvals}](${2:source coord})(${3:target coord})"
      }
    },
    {
      "name": "xcoord"
    },
    {
      "name": "ycoord"
    },
    {
      "name": "isalive(coord)"
    },
    {
      "name": "isalive",
      "arg": {
        "format": "{}",
        "snippet": "{${1:(${2:coord1})...(${3:coordN})}}"
      }
    },
    {
      "name": "sseqset",
      "arg": {
        "format": "{}",
        "snippet": "{${1:options%keyvals}}"
      }
    },
    {
      "name": "Do",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:iterations}}{${2:loop body}}"
      }
    },
    {
      "name": "DoUntilOutOfBounds",
      "arg": {
        "format": "{}",
        "snippet": "{${1:loop body}}"
      }
    },
    {
      "name": "DoUntilOutOfBoundsThenNMore",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:extra iterations}}{${2:loop body}}"
      }
    },
    {
      "name": "iteration"
    },
    {
      "name": "NewSseqCommand",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:macro%cmd}}{${2:args}}{${3:definition}}"
      }
    },
    {
      "name": "DeclareSseqCommand",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:macro%cmd}}{${2:args}}{${3:definition}}"
      }
    },
    {
      "name": "NewSseqGroup",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:macro%cmd}}{${2:args}}{${3:definition}}"
      }
    },
    {
      "name": "DeclareSseqGroup",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:macro%cmd}}{${2:args}}{${3:definition}}"
      }
    },
    {
      "name": "SseqCopyPage",
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:macro%cmd}}{${2:spectral sequence name}}{${3:page}}"
      }
    },
    {
      "name": "SseqNewFamily",
      "arg": {
        "format": "{}",
        "snippet": "{${1:family name}}"
      }
    },
    {
      "name": "SseqParseInt",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:macro%cmd}}{${2:integer expr}}"
      }
    },
    {
      "name": "SseqIfEmptyTF",
      "unusual": true,
      "arg": {
        "format": "{}{}{}",
        "snippet": "{${1:expression}}{${2:true}}{${3:false}}"
      }
    },
    {
      "name": "SseqIfEmptyT",
      "unusual": true,
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:expression}}{${2:true}}"
      }
    },
    {
      "name": "SseqIfEmptyF",
      "unusual": true,
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:expression}}{${2:false}}"
      }
    },
    {
      "name": "IfExistsTF",
      "unusual": true,
      "arg": {
        "format": "{}(){}{}",
        "snippet": "{${1:page}}(${4:coord}){${2:true}}{${3:false}}"
      }
    },
    {
      "name": "IfExistsT",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:true}}"
      }
    },
    {
      "name": "IfExistsF",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:false}}"
      }
    },
    {
      "name": "IfAliveTF",
      "unusual": true,
      "arg": {
        "format": "{}(){}{}",
        "snippet": "{${1:page}}(${4:coord}){${2:true}}{${3:false}}"
      }
    },
    {
      "name": "IfAliveT",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:true}}"
      }
    },
    {
      "name": "IfAliveF",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:false}}"
      }
    },
    {
      "name": "IfOutOfBoundsTF(coord)",
      "unusual": true,
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:true}}{${2:false}}"
      }
    },
    {
      "name": "IfOutOfBoundsT(coord)",
      "unusual": true,
      "arg": {
        "format": "{}",
        "snippet": "{${1:true}}"
      }
    },
    {
      "name": "IfOutOfBoundsF(coord)",
      "unusual": true,
      "arg": {
        "format": "{}",
        "snippet": "{${1:false}}"
      }
    },
    {
      "name": "IfInBoundsTF(coord)",
      "unusual": true,
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:true}}{${2:false}}"
      }
    },
    {
      "name": "IfInBoundsT(coord)",
      "unusual": true,
      "arg": {
        "format": "{}",
        "snippet": "{${1:true}}"
      }
    },
    {
      "name": "IfInBoundsF(coord)",
      "unusual": true,
      "arg": {
        "format": "{}",
        "snippet": "{${1:false}}"
      }
    },
    {
      "name": "IfValidDifferentialTF",
      "unusual": true,
      "arg": {
        "format": "{}(){}{}",
        "snippet": "{${1:page}}(${4:coord}){${2:true}}{${3:false}}"
      }
    },
    {
      "name": "IfValidDifferentialTF",
      "unusual": true,
      "arg": {
        "format": "{}()(){}{}",
        "snippet": "{${1:page}}(${4:coord})(${5:target coord}){${2:true}}{${3:false}}"
      }
    },
    {
      "name": "IfValidDifferentialT",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:true}}"
      }
    },
    {
      "name": "IfValidDifferentialT",
      "unusual": true,
      "arg": {
        "format": "{}()(){}",
        "snippet": "{${1:page}}(${3:coord})(${4:target coord}){${2:true}}"
      }
    },
    {
      "name": "IfValidDifferentialF",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:false}}"
      }
    },
    {
      "name": "IfValidDifferentialF",
      "unusual": true,
      "arg": {
        "format": "{}()(){}",
        "snippet": "{${1:page}}(${3:coord})(${4:target coord}){${2:false}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialTF",
      "unusual": true,
      "arg": {
        "format": "{}(){}{}",
        "snippet": "{${1:page}}(${4:coord}){${2:true}}{${3:false}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialTF",
      "unusual": true,
      "arg": {
        "format": "{}()(){}{}",
        "snippet": "{${1:page}}(${4:coord})(${5:target coord}){${2:true}}{${3:false}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialTF",
      "unusual": true,
      "arg": {
        "format": "[]{}()(){}{}",
        "snippet": "[${4:options}]{${1:page}}(${5:coord})(${6:target coord}){${2:true}}{${3:false}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialT",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:true}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialT",
      "unusual": true,
      "arg": {
        "format": "{}()(){}",
        "snippet": "{${1:page}}(${3:coord})(${4:target coord}){${2:true}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialT",
      "unusual": true,
      "arg": {
        "format": "[]{}()(){}",
        "snippet": "[${3:options}]{${1:page}}(${4:coord})(${5:target coord}){${2:true}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialF",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:false}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialF",
      "unusual": true,
      "arg": {
        "format": "{}()(){}",
        "snippet": "{${1:page}}(${3:coord})(${4:target coord}){${2:false}}"
      }
    },
    {
      "name": "DrawIfValidDifferentialF",
      "unusual": true,
      "arg": {
        "format": "[]{}()(){}",
        "snippet": "[${3:options}]{${1:page}}(${4:coord})(${5:target coord}){${2:false}}"
      }
    },
    {
      "name": "DrawIfValidDifferential",
      "unusual": true,
      "arg": {
        "format": "{}(){}",
        "snippet": "{${1:page}}(${3:coord}){${2:true}}"
      }
    },
    {
      "name": "DrawIfValidDifferential",
      "unusual": true,
      "arg": {
        "format": "{}()(){}",
        "snippet": "{${1:page}}(${3:coord})(${4:target coord}){${2:true}}"
      }
    },
    {
      "name": "DrawIfValidDifferential",
      "unusual": true,
      "arg": {
        "format": "[]{}()(){}",
        "snippet": "[${3:options}]{${1:page}}(${4:coord})(${5:target coord}){${2:true}}"
      }
    },
    {
      "name": "SseqNormalizeMonomial",
      "unusual": true,
      "arg": {
        "format": "{}",
        "snippet": "{${1:monomial}}"
      }
    },
    {
      "name": "result",
      "unusual": true
    },
    {
      "name": "SseqNormalizeMonomialSetVariables",
      "unusual": true,
      "arg": {
        "format": "{}",
        "snippet": "{${1:monomial}}"
      }
    },
    {
      "name": "SseqAHSSNameHandler",
      "unusual": true
    },
    {
      "name": "parsecoordinate",
      "arg": {
        "format": "{}()",
        "snippet": "{${1:macro%cmd}}(${2:coord})"
      }
    },
    {
      "name": "getdtarget",
      "arg": {
        "format": "{}{}()",
        "snippet": "{${1:macro%cmd}}{${2:page}}(${3:source coord})"
      }
    },
    {
      "name": "parsedifferential",
      "arg": {
        "format": "{}()",
        "snippet": "{${1:page}}(${2:differential coord})"
      }
    },
    {
      "name": "parsedifferential",
      "arg": {
        "format": "{}()()",
        "snippet": "{${1:page}}(${2:differential coord})(${3:differential target})"
      }
    },
    {
      "name": "nameclass",
      "arg": {
        "format": "{}()",
        "snippet": "{${1:name}}(${2:coord})"
      }
    },
    {
      "name": "tagclass",
      "arg": {
        "format": "{}()",
        "snippet": "{${1:tag}}(${2:coord})"
      }
    },
    {
      "name": "gettag",
      "arg": {
        "format": "{}()",
        "snippet": "{${1:macro%cmd}}(${2:coord})"
      }
    },
    {
      "name": "pushstack(coord)"
    },
    {
      "name": "savestack"
    },
    {
      "name": "restorestack"
    },
    {
      "name": "SseqNewClassPattern",
      "arg": {
        "format": "{}{}",
        "snippet": "{${1:name}}{${2:offsets}}"
      }
    },
    {
      "name": "SseqOrientationNormal"
    },
    {
      "name": "SseqOrientationSideways"
    },
    {
      "name": "SseqOrientationToggle"
    }
  ],
  "envs": [
    {
      "name": "sseqdata"
    },
    {
      "name": "sseqdata",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "sseqpage"
    },
    {
      "name": "sseqpage",
      "arg": {
        "format": "[]",
        "snippet": "[${1:options%keyvals}]"
      }
    },
    {
      "name": "quiet",
      "unusual": true
    }
  ],
  "keys": {
    "\\usepackage/spectralsequences#c": [
      "draft\r",
      "tooltips\r"
    ],
    "\\class#c,\\d#c,\\structline#c,\\replaceclass#c,\\classoptions#c,\\doptions#c,\\structlineoptions#c,\\replacestructlines#c": [
      "xshift=${1:integer}\r",
      "yshift=${1:integer}\r",
      "%color\r",
      "\"${1:text}\"\r",
      "\"${1:text}\" ${2:TikZ options}\r",
      "\"${1:text}\"'\r",
      "\"${1:text}\"' ${2:TikZ options}\r",
      "pin={${1:TikZ options}}\r",
      "description\r",
      "circlen=${1:integer}\r",
      "newellipse\r",
      "ellipse ratio=${1:ratio}\r",
      "isosceles triangle\r",
      "rectangle\r",
      "diamond\r",
      "semicircle\r",
      "regular polygon\r",
      "regular polygon sides=${1:integer}\r",
      "minimum width=",
      "minimum height=",
      "minimum size=",
      "inner sep=",
      "outer sep=",
      "name=${1:node name}\r",
      "show name={${1:label options}}\r",
      "tag=${1:tag}\r",
      "insert=${1:integer}\r",
      "offset={(${1:x,y})}\r",
      "tooltip=${1:text}\r"
    ],
    "\\classoptions#c": [
      "page=${1:page}\r",
      "page=${1:page}--${2:page max}\r",
      "generation=${1:generation}\r",
      "generation=${1:generation}--${2:generation max}\r",
      "fill\r"
    ],
    "\\d#c,\\structline#c,\\extension#c,\\doptions#c,\\structlineoptions#c,\\replacestructlines#c": [
      "source anchor=${1:anchor}\r",
      "target anchor=${1:anchor}\r",
      "shorten >=",
      "shorten <=",
      "bend left=${1:angle}\r",
      "bend right=${1:angle}\r",
      "in=${1:anchor}\r",
      "out=${1:anchor}\r"
    ],
    "\\structline#c,\\structlineoptions#c": [
      "page=${1:page}\r",
      "page=${1:page}--${2:page max}\r",
      "dashed\r"
    ],
    "\\circleclasses#c": [
      "fit=${1:coords or nodes}\r",
      "rounded rectangle\r",
      "ellipse ratio=${1:ratio}\r",
      "class style\r",
      "permanent cycle style\r",
      "transient cycle style\r",
      "this page class style\r",
      "differential style\r",
      "struct line style\r",
      "page=${1:page}\r",
      "page=${1:page}--${2:page max}\r"
    ],
    "\\begin{tikzpicture}#c,\\tikz#c,\\begin{scope}#c,\\tikzset#c,\\scoped#c,\\path#c,\\draw#c,\\fill#c,\\filldraw#c,\\pattern#c,\\shade#c,\\shadedraw#c,\\clip#c,\\node#c,\\coordinate#c,\\nodepart#c": [
      "background\r",
      "page constraint={${1:predicate}}\r",
      "page constraint or={${1:predicate}}\r",
      "class style\r",
      "permanent cycle style\r",
      "transient cycle style\r",
      "this page class style\r",
      "differential style\r",
      "struct line style\r"
    ],
    "\\begin{sseqdata}#c,\\begin{sseqpage}#c,\\sseqset#c": [
      "sseqs={${1:keys}}\r",
      "change sseqs={${1:keys}}\r",
      "sseq={${1:keys}}\r",
      "change sseq={${1:keys}}\r",
      "classes={${1:keys}}\r",
      "cycles={${1:keys}}\r",
      "change classes={${1:keys}}\r",
      "change cycles={${1:keys}}\r",
      "permanent classes={${1:keys}}\r",
      "permanent cycles={${1:keys}}\r",
      "change permanent classes={${1:keys}}\r",
      "change permanent cycles={${1:keys}}\r",
      "transient classes={${1:keys}}\r",
      "transient cycles={${1:keys}}\r",
      "change transient classes={${1:keys}}\r",
      "change transient cycles={${1:keys}}\r",
      "this page classes={${1:keys}}\r",
      "this page cycles={${1:keys}}\r",
      "change this page classes={${1:keys}}\r",
      "change this page cycles={${1:keys}}\r",
      "edges={${1:keys}}\r",
      "differentials={${1:keys}}\r",
      "struct lines={${1:keys}}\r",
      "change edges={${1:keys}}\r",
      "change differentials={${1:keys}}\r",
      "change struct lines={${1:keys}}\r",
      "this page struct lines={${1:keys}}\r",
      "change this page struct lines={${1:keys}}\r",
      "tikz primitives={${1:keys}}\r",
      "change tikz primitives={${1:keys}}\r",
      "labels={${1:keys}}\r",
      "change labels={${1:keys}}\r",
      "class labels={${1:keys}}\r",
      "inner class labels={${1:keys}}\r",
      "outer class labels={${1:keys}}\r",
      "change class labels={${1:keys}}\r",
      "change inner class labels={${1:keys}}\r",
      "change outer class labels={${1:keys}}\r",
      "edge labels={${1:keys}}\r",
      "differential labels={${1:keys}}\r",
      "struct line labels={${1:keys}}\r",
      "change edge labels={${1:keys}}\r",
      "change differential labels={${1:keys}}\r",
      "change struct line labels={${1:keys}}\r",
      "label distance=",
      "above label distance=",
      "below label distance=",
      "left label distance=",
      "right label distance=",
      "above left label distance=",
      "above right label distance=",
      "below left label distance=",
      "below right label distance=",
      "run off=${1:start tip}-${2:end tip}\r",
      "run off struct lines=${1:start tip}-${2:end tip}\r",
      "run off differentials=${1:start tip}-${2:end tip}\r",
      "class label handler=${1:macro}\r",
      "class name handler=${1:macro}\r",
      "class name prefix=${1:prefix}\r",
      "class name postfix=${1:postfix}\r",
      "name=${1:sseq name}\r",
      "page=${1:page}\r",
      "page=${1:page}--${2:page max}\r",
      "degree={${1:x degree}}{${2:y degree}}\r",
      "cohomological Serre grading\r",
      "homological Serre grading\r",
      "Adams grading\r",
      "strict degree\r",
      "lax degree\r",
      "no differentials\r",
      "draw differentials\r",
      "no struct lines\r",
      "draw struct lines\r",
      "no orphan edges\r",
      "draw orphan edges\r",
      "class pattern=${1:class pattern name}\r",
      "class placement transform={${1:transform keys}}\r",
      "add class placement transform={${1:transform keys}}\r",
      "math nodes",
      "scale=${1:factor}\r",
      "xscale=${1:factor}\r",
      "yscale=${1:factor}\r",
      "xmirror\r",
      "ymirror\r",
      "rotate=${1:angle}\r",
      "x range={${1:x min}}{${2:x max}}\r",
      "y range={${1:y min}}{${2:y max}}\r",
      "range check standard\r",
      "range check sideways\r",
      "range check off\r",
      "grid=${1:grid type}\r",
      "grid color=",
      "grid step=${1:integer}\r",
      "x grid step=${1:integer}\r",
      "y grid step=${1:integer}\r",
      "title=${1:text}\r",
      "title style={${1:keys}}\r",
      "x label=${1:text}\r",
      "y label=${1:text}\r",
      "x label style={${1:keys}}\r",
      "y label style={${1:keys}}\r",
      "label style={${1:keys}}\r",
      "no title\r",
      "draw title\r",
      "no x label\r",
      "no y label\r",
      "no labels\r",
      "draw x label\r",
      "draw y label\r",
      "draw labels\r",
      "no x ticks\r",
      "no y ticks\r",
      "no ticks\r",
      "draw x ticks\r",
      "draw y ticks\r",
      "draw ticks\r",
      "x tick step=${1:integer}\r",
      "y tick step=${1:integer}\r",
      "tick step=${1:integer}\r",
      "x tick offset=${1:integer}\r",
      "y tick offset=${1:integer}\r",
      "tick offset=${1:integer}\r",
      "x major tick step=${1:integer}\r",
      "y major tick step=${1:integer}\r",
      "major tick step=${1:integer}\r",
      "x minor tick step=${1:integer}\r",
      "y minor tick step=${1:integer}\r",
      "minor tick step=${1:integer}\r",
      "x tick style={${1:keys}}\r",
      "y tick style={${1:keys}}\r",
      "tick style={${1:keys}}\r",
      "x tick handler=${1:macro}\r",
      "y tick handler=${1:macro}\r",
      "tick handler=${1:macro}\r",
      "x axis type=${1|border,center,frame,none\r|}",
      "y axis type=${1|border,center,frame,none\r|}",
      "axes type=${1|border,center,frame,none\r|}",
      "no x axis\r",
      "no y axis\r",
      "no axes\r",
      "x axis origin=${1:x value}\r",
      "y axis origin=${1:y value}\r",
      "x axis gap=",
      "y axis gap=",
      "axes gap=",
      "x tick gap=",
      "y tick gap=",
      "x axis extend start=",
      "y axis extend start=",
      "x axis extend end=",
      "y axis extend end=",
      "x axis tail=",
      "y axis tail=",
      "x axis clip padding=",
      "y axis clip padding=",
      "right clip padding=",
      "left clip padding=",
      "top clip padding=",
      "bottom clip padding=",
      "custom clip=${1:clip path}\r",
      "clip",
      "rotate labels"
    ],
    "\\begin{sseqdata}#c": [
      "update existing\r"
    ],
    "\\begin{sseqpage}#c": [
      "keep changes"
    ]
  },
  "args": [
    "\\usepackage/spectralsequences#c"
  ]
}